name: Docker + ngrok + Tests pytest
on: 
  push:
    branches: [ main, master ]

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install pytest dependencies ONLY
      run: |
        pip install pytest==7.4.0 requests==2.31.0
        
    - name: Build Docker image
      run: |
        docker build -t flask-app .
        
    - name: Deploy et r√©cup√©rer URL
      run: |
        # Installer ngrok - CORRECTION ICI
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update && sudo apt install ngrok
        
        # Configurer le token
        ngrok config add-authtoken ${{ secrets.NGROK_TOKEN }}
        
        # Lancer l'app Flask
        docker run -d -p 5000:5000 --name flask-container flask-app
        sleep 10
        
        # V√©rifier que l'app Flask r√©pond localement
        echo "üîç Test local de l'app Flask..."
        curl -f http://localhost:5000/ || (echo "‚ùå App Flask ne r√©pond pas localement" && docker logs flask-container && exit 1)
        echo "‚úÖ App Flask r√©pond localement"
        
        # Lancer ngrok
        ngrok http 5000 --log=stdout > /tmp/ngrok.log 2>&1 &
        sleep 25
        
        # R√©cup√©rer l'URL avec plusieurs tentatives
        for i in {1..5}; do
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*https[^"]*' | cut -d'"' -f4 | head -1)
          if [ -n "$NGROK_URL" ]; then
            break
          fi
          echo "Tentative $i/5 pour r√©cup√©rer l'URL..."
          sleep 5
        done
        
        if [ -n "$NGROK_URL" ]; then
          echo "üåê Application accessible sur : $NGROK_URL"
          
          # Test de connectivit√© ngrok
          echo "üîç Test de connectivit√© ngrok..."
          for i in {1..3}; do
            if curl -f -s "$NGROK_URL/" > /dev/null; then
              echo "‚úÖ ngrok tunnel OK"
              echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
              break
            else
              echo "Tentative $i/3 de connexion ngrok..."
              sleep 10
            fi
          done
          
          if [ -z "$(curl -s "$NGROK_URL/" || echo '')" ]; then
            echo "‚ùå ngrok tunnel ne r√©pond pas"
            exit 1
          fi
          
        else
          echo "‚ùå Pas d'URL trouv√©e"
          cat /tmp/ngrok.log
          exit 1
        fi
        
    - name: Run pytest tests
      env:
        NGROK_URL: ${{ env.NGROK_URL }}
      run: |
        echo "üß™ === TESTS PYTEST ==="
        echo "URL test√©e : $NGROK_URL"
        
        # Lancer pytest depuis un dossier s√©par√© pour √©viter l'import de __init__.py
        mkdir /tmp/tests
        cp test_app.py /tmp/tests/
        cp conftest.py /tmp/tests/
        cd /tmp/tests
        
        pytest test_app.py -v --tb=short -s
        
    - name: Keep alive
      run: |
        echo ""
        echo "URL disponible pendant 120 secondes pour tests manuels : $NGROK_URL"
        sleep 30
        echo "URL disponible pendant 90 secondes pour tests manuels : $NGROK_URL"
        sleep 30
        echo "URL disponible pendant 60 secondes pour tests manuels : $NGROK_URL"
        sleep 60
        echo "‚èπÔ∏è Preview termin√©"
